name: "Create storage account and container"

inputs:
  WORKING_DIR:
    description: "working directory"
    required: true
  AZURE_SP:
    description: "Credentials of the Azure SP"
    required: true
  RESOURCE_GROUP_NAME:
    description: "Name of the resource group"
    required: true
  STORAGE_ACCOUNT_NAME:
    description: "Name of the storage account"
    required: true
  CONTAINER_NAME:
    description: "Name of the container where the state files are"
    required: true
  STATE_FILE:
    description: "Name of the state files"
    required: true
  

runs:
  using: "composite"
  steps:
    # - name: "Check inputs"
    #   run: ls -ltr
    #   shell: bash
    #   working-directory: ${{ inputs.WORKING_DIR }}

    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ inputs.AZURE_SP }}
    
    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ inputs.AZURE_SP }}

    # - name: Create Provider file
    #   shell: pwsh
    #   run: |
    #     New-Item -Path "${{ inputs.WORKING_DIR }}" -Name "backend.tf" -Value "terraform {`r`nbackend `"azurerm`" {`r`nresource_group_name = ${{ inputs.RESOURCE_GROUP_NAME }}`r`nstorage_account_name = ${{ inputs.STORAGE_ACCOUNT_NAME }}`r`ncontainer_name = ${{ inputs.CONTAINER_NAME }}`r`nkey = ${{ inputs.STATE_FILE }}}`r`n}"

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive -diff ${{ inputs.WORKING_DIR}}
      continue-on-error: false
      shell: bash
      working-directory: ${{ inputs.WORKING_DIR }}

    - name: Terraform Init
      id: init
      run: terraform init
      shell: bash
      working-directory: ${{ inputs.WORKING_DIR }}

    - name: Create Provider file
      shell: pwsh
      run: |
        New-Item -Path "${{ inputs.WORKING_DIR }}" -Name "azurerm_provider.tf" -Value "provider `"azurerm`"{`r`nskip_provider_registration = true`r`nfeatures {}`r`n}"
        