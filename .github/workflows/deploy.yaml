# More GitHub Actions for Azure: https://github.com/Azure/actions

name: App deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  # without-actions-template:
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_SP }}

  #   - name: Azure CLI script
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: 2.30.0
  #       inlineScript: |
  #         az group list

  dev:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID}}

    steps:
    - uses: jungwinter/split@v2
      id: split
      with:
        msg: ${{ github.repository }}
        separator: "/"

    - uses: actions/checkout@v3

    - name: "Azure setup"
      uses: ./.github/actions/azure-setup
      with: 
        AZURE_SP: ${{ secrets.AZURE_SP }}
        RESOURCE_GROUP_NAME: tfstates-${{ steps.split.outputs._1 }}-${{ github.job }}
        RESOURCE_GROUP_LOCATION: "centralus"
        TAGS: '"UseCase=Terraform" "Stage=${{ github.job }}" "Deployed=GitHub Actions" Repository=${{ steps.split.outputs._1 }} "RunNumber=${{ github.run_number }}"'
        STORAGE_ACCOUNT_NAME: stac${{ github.job }}

    - name: "Terraform plan"
      uses: ./.github/actions/terraform-plan
      with:
        WORKING_DIR: ${{ github.workspace }}/terraform/terraform-main
        AZURE_SP: ${{ secrets.AZURE_SP }}
        RESOURCE_GROUP_NAME: tfstates-${{ steps.split.outputs._1 }}-${{ github.job }}
        STORAGE_ACCOUNT_NAME: stac${{ github.job }}
        CONTAINER_NAME: "states"
        STATE_FILE: "terraform.tfstate"

    - name: "Terraform apply"
      uses: ./.github/actions/terraform-apply
      with:
        WORKING_DIR: ${{ github.workspace }}/terraform/terraform-main
        AZURE_SP: ${{ secrets.AZURE_SP }}
        RESOURCE_GROUP_NAME: tfstates-${{ steps.split.outputs._1 }}-${{ github.job }}
        STORAGE_ACCOUNT_NAME: stac${{ github.job }}
        CONTAINER_NAME: "states"
        STATE_FILE: "terraform.tfstate"
    
    # - uses: hashicorp/setup-terraform@v2

    # - name: Terraform output test
    #   run: |
    #     output=$(terraform output acr_server)
    #     echo $output
    #     echo '::set-output name=ACR_USERNAME::$(terraform output acr_server)
    #   working-directory: ${{ github.workspace }}/terraform/terraform-main/
    #   shell: bash

    # - name: Read folder
    #   run: ls -ltr
    #   working-directory: ${{ github.workspace }}/terraform/terraform-main/
    #   shell: bash

    # - name: "Cat ACR details"
    #   run: |
    #     cat ${{ github.workspace }}/terraform/terraform-main/output.json
    #   continue-on-error: true
    #   shell: bash

    # - name: "Cat ACR details"
    #   run: |
    #     cat ${{ github.workspace }}/terraform/terraform-main/output_1.json
    #   continue-on-error: true
    #   shell: bash

    # - name: "Get ACR details"
    #   run: |
    #     getacr=$(jq -r .acr_username.value ${{ github.workspace }}/terraform/terraform-main/output.json)
    #     echo $getacr
    #   continue-on-error: true
    #   shell: bash

    - name: "Get ACR details"
      id: acr-details
      run: |
        echo '::set-output name=ACR_USERNAME::$(jq -r .acr_username.value ${{ github.workspace }}/terraform/terraform-main/output.json)'
        echo '::set-output name=ACR_PASSWORD::$(jq -r .acr_password.value ${{ github.workspace }}/terraform/terraform-main/output.json)'
        echo '::set-output name=ACR_SERVER::$(jq -r .acr_server.value ${{ github.workspace }}/terraform/terraform-main/output.json)'
      continue-on-error: true
      shell: bash
      working-directory: ${{ github.workspace }}/terraform/terraform-main/

    - name: Get ACR_USERNAME
      run: echo "ACR NAME -> ${{ steps.acr-details.outputs.ACR_USERNAME }}"

    - name: Get ACR_PASSWORD
      run: echo "ACR NAME -> ${{ steps.acr-details.outputs.ACR_PASSWORD }}"

    - name: Get ACR_SERVER
      run: echo "ACR NAME -> ${{ steps.acr-details.outputs.ACR_SERVER }}"

    - name: Docker Login - Azure Container Registry
      uses: Azure/docker-login@v1
      with:
        username: $(terraform output acr_username)
        password: $(terraform output acr_password)
        login-server: $(terraform output acr_server)
        
    # - name: Build e Push no Azure Container Registry
    #   run: |
    #     docker build . --file ${{ github.workspace }}/api/Dockerfile --tag ${{ steps.acr-details.outputs.ACR_SERVER }}/api:latest
    #     docker tag ${{ steps.acr-details.outputs.ACR_SERVER }}/apicontagem:latest ${{ steps.acr-details.outputs.ACR_SERVER }}/apicontagem:$(date +%s)
    #     docker push ${{ steps.acr-details.outputs.ACR_SERVER }}/apicontagem

